CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    department_id INTEGER,
    hourly_rate NUMERIC(10, 2)
);

CREATE TABLE departments (
    department_id INTEGER PRIMARY KEY,
    budget NUMERIC(10, 2)
);

CREATE TABLE projects (
    project_id INTEGER PRIMARY KEY,
    department_id INTEGER,
    total_hours_allocated INTEGER
);

CREATE TABLE employee_projects (
    employee_project_id INTEGER PRIMARY KEY,
    employee_id INTEGER,
    project_id INTEGER,
    hours_worked INTEGER
);

INSERT INTO departments (department_id, budget) VALUES
(1, 5000.00),       
(2, 7000.00),       
(3, 4500.00);       

INSERT INTO employees (employee_id, department_id, hourly_rate) VALUES
(1, 1, 30.00),
(2, 1, 35.00),      
(3, 2, 40.00),      
(4, 2, 45.00),      
(5, 3, 25.00),      
(6, 3, 20.00);      

INSERT INTO projects (project_id, department_id, total_hours_allocated) VALUES
(1, 1, 120),        
(2, 2, 150),       
(3, 3, 80);         
INSERT INTO employee_projects (employee_project_id, employee_id, project_id, hours_worked) VALUES
(1, 1, 1, 40),      
(2, 2, 1, 50),      
(3, 3, 2, 60),      
(4, 4, 2, 70),      
(5, 5, 3, 30),      
(6, 6, 3, 20),      
(7, 1, 1, 10),      
(8, 2, 1, 20);   

--1
WITH tas AS (
    SELECT 
        d.department_id,
        d.budget,
        e.employee_id,
        e.hourly_rate,
        p.project_id,
        ep.employee_project_id,
        ep.hours_worked
    FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN projects p ON d.department_id = p.department_id
    JOIN employee_projects ep ON p.project_id = ep.project_id
)
SELECT 
    tas.project_id,
    SUM(tas.hours_worked * tas.hourly_rate) AS tot
FROM tas 
GROUP BY tas.project_id
HAVING SUM(tas.hours_worked * tas.hourly_rate) > (
    SELECT budget 
    FROM departments d 
    WHERE d.department_id = (
        SELECT department_id 
        FROM projects p 
        WHERE p.project_id = tas.project_id
    )
);

--2
WITH RECURSIVE employee_hours AS (
    SELECT 
        ep.employee_id,
        SUM(ep.hours_worked) / 4.0 AS average_weekly_hours
    FROM 
        employee_projects ep
    JOIN 
        projects p ON ep.project_id = p.project_id
    WHERE
        ep.hours_worked IS NOT NULL  -- Ensures valid data
    GROUP BY 
        ep.employee_id
)
SELECT 
    eh.employee_id,
    eh.average_weekly_hours
FROM 
    employee_hours eh
WHERE 
    eh.average_weekly_hours > 40;

--3
SELECT 
    e.department_id,
    strftime('%Y', p.project_date) AS year,
    (strftime('%m', p.project_date) - 1) / 3 + 1 AS quarter,
    SUM(ep.hours_worked * e.hourly_rate) AS total_cost,
    d.budget
FROM employee_projects ep
JOIN projects p ON ep.project_id = p.project_id
JOIN employees e ON ep.employee_id = e.employee_id
JOIN departments d ON e.department_id = d.department_id
GROUP BY e.department_id, year, quarter
HAVING total_cost > d.budget
ORDER BY e.department_id, year, quarter;
